#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'answerMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 21

# The Active Message type associated with this message.
AM_TYPE = 0

class answerMsg(tinyos.message.Message.Message):
    # Create a new answerMsg of size 21.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=21):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <answerMsg> \n"
        try:
            s += "  [group_id=0x%x]\n" % (self.get_group_id())
        except:
            pass
        try:
            s += "  [max=0x%x]\n" % (self.get_max())
        except:
            pass
        try:
            s += "  [min=0x%x]\n" % (self.get_min())
        except:
            pass
        try:
            s += "  [sum=0x%x]\n" % (self.get_sum())
        except:
            pass
        try:
            s += "  [average=0x%x]\n" % (self.get_average())
        except:
            pass
        try:
            s += "  [median=0x%x]\n" % (self.get_median())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: group_id
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'group_id' is signed (False).
    #
    def isSigned_group_id(self):
        return False
    
    #
    # Return whether the field 'group_id' is an array (False).
    #
    def isArray_group_id(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'group_id'
    #
    def offset_group_id(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'group_id'
    #
    def offsetBits_group_id(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'group_id'
    #
    def get_group_id(self):
        return self.getUIntElement(self.offsetBits_group_id(), 8, 1)
    
    #
    # Set the value of the field 'group_id'
    #
    def set_group_id(self, value):
        self.setUIntElement(self.offsetBits_group_id(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'group_id'
    #
    def size_group_id(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'group_id'
    #
    def sizeBits_group_id(self):
        return 8
    
    #
    # Accessor methods for field: max
    #   Field type: long
    #   Offset (bits): 8
    #   Size (bits): 32
    #

    #
    # Return whether the field 'max' is signed (False).
    #
    def isSigned_max(self):
        return False
    
    #
    # Return whether the field 'max' is an array (False).
    #
    def isArray_max(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'max'
    #
    def offset_max(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'max'
    #
    def offsetBits_max(self):
        return 8
    
    #
    # Return the value (as a long) of the field 'max'
    #
    def get_max(self):
        return self.getUIntElement(self.offsetBits_max(), 32, 1)
    
    #
    # Set the value of the field 'max'
    #
    def set_max(self, value):
        self.setUIntElement(self.offsetBits_max(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'max'
    #
    def size_max(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'max'
    #
    def sizeBits_max(self):
        return 32
    
    #
    # Accessor methods for field: min
    #   Field type: long
    #   Offset (bits): 40
    #   Size (bits): 32
    #

    #
    # Return whether the field 'min' is signed (False).
    #
    def isSigned_min(self):
        return False
    
    #
    # Return whether the field 'min' is an array (False).
    #
    def isArray_min(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'min'
    #
    def offset_min(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'min'
    #
    def offsetBits_min(self):
        return 40
    
    #
    # Return the value (as a long) of the field 'min'
    #
    def get_min(self):
        return self.getUIntElement(self.offsetBits_min(), 32, 1)
    
    #
    # Set the value of the field 'min'
    #
    def set_min(self, value):
        self.setUIntElement(self.offsetBits_min(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'min'
    #
    def size_min(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'min'
    #
    def sizeBits_min(self):
        return 32
    
    #
    # Accessor methods for field: sum
    #   Field type: long
    #   Offset (bits): 72
    #   Size (bits): 32
    #

    #
    # Return whether the field 'sum' is signed (False).
    #
    def isSigned_sum(self):
        return False
    
    #
    # Return whether the field 'sum' is an array (False).
    #
    def isArray_sum(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sum'
    #
    def offset_sum(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'sum'
    #
    def offsetBits_sum(self):
        return 72
    
    #
    # Return the value (as a long) of the field 'sum'
    #
    def get_sum(self):
        return self.getUIntElement(self.offsetBits_sum(), 32, 1)
    
    #
    # Set the value of the field 'sum'
    #
    def set_sum(self, value):
        self.setUIntElement(self.offsetBits_sum(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sum'
    #
    def size_sum(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'sum'
    #
    def sizeBits_sum(self):
        return 32
    
    #
    # Accessor methods for field: average
    #   Field type: long
    #   Offset (bits): 104
    #   Size (bits): 32
    #

    #
    # Return whether the field 'average' is signed (False).
    #
    def isSigned_average(self):
        return False
    
    #
    # Return whether the field 'average' is an array (False).
    #
    def isArray_average(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'average'
    #
    def offset_average(self):
        return (104 / 8)
    
    #
    # Return the offset (in bits) of the field 'average'
    #
    def offsetBits_average(self):
        return 104
    
    #
    # Return the value (as a long) of the field 'average'
    #
    def get_average(self):
        return self.getUIntElement(self.offsetBits_average(), 32, 1)
    
    #
    # Set the value of the field 'average'
    #
    def set_average(self, value):
        self.setUIntElement(self.offsetBits_average(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'average'
    #
    def size_average(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'average'
    #
    def sizeBits_average(self):
        return 32
    
    #
    # Accessor methods for field: median
    #   Field type: long
    #   Offset (bits): 136
    #   Size (bits): 32
    #

    #
    # Return whether the field 'median' is signed (False).
    #
    def isSigned_median(self):
        return False
    
    #
    # Return whether the field 'median' is an array (False).
    #
    def isArray_median(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'median'
    #
    def offset_median(self):
        return (136 / 8)
    
    #
    # Return the offset (in bits) of the field 'median'
    #
    def offsetBits_median(self):
        return 136
    
    #
    # Return the value (as a long) of the field 'median'
    #
    def get_median(self):
        return self.getUIntElement(self.offsetBits_median(), 32, 1)
    
    #
    # Set the value of the field 'median'
    #
    def set_median(self, value):
        self.setUIntElement(self.offsetBits_median(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'median'
    #
    def size_median(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'median'
    #
    def sizeBits_median(self):
        return 32
    
