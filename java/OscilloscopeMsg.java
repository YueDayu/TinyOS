/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'OscilloscopeMsg'
 * message type.
 */

public class OscilloscopeMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new OscilloscopeMsg of size 24. */
    public OscilloscopeMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new OscilloscopeMsg of the given data_length. */
    public OscilloscopeMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg with the given data_length
     * and base offset.
     */
    public OscilloscopeMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store.
     */
    public OscilloscopeMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public OscilloscopeMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public OscilloscopeMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg embedded in the given message
     * at the given base offset.
     */
    public OscilloscopeMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg embedded in the given message
     * at the given base offset and length.
     */
    public OscilloscopeMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <OscilloscopeMsg> \n";
      try {
        s += "  [version=0x"+Long.toHexString(get_version())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [interval=0x"+Long.toHexString(get_interval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timestamps=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_timestamps(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temReadings=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_temReadings(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humReadings=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_humReadings(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parReadings=";
        for (int i = 0; i < 2; i++) {
          s += "0x"+Long.toHexString(getElement_parReadings(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: version
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'version' is signed (false).
     */
    public static boolean isSigned_version() {
        return false;
    }

    /**
     * Return whether the field 'version' is an array (false).
     */
    public static boolean isArray_version() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'version'
     */
    public static int offset_version() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'version'
     */
    public static int offsetBits_version() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'version'
     */
    public int get_version() {
        return (int)getUIntBEElement(offsetBits_version(), 16);
    }

    /**
     * Set the value of the field 'version'
     */
    public void set_version(int value) {
        setUIntBEElement(offsetBits_version(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'version'
     */
    public static int size_version() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'version'
     */
    public static int sizeBits_version() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: interval
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'interval' is signed (false).
     */
    public static boolean isSigned_interval() {
        return false;
    }

    /**
     * Return whether the field 'interval' is an array (false).
     */
    public static boolean isArray_interval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'interval'
     */
    public static int offset_interval() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'interval'
     */
    public static int offsetBits_interval() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'interval'
     */
    public int get_interval() {
        return (int)getUIntBEElement(offsetBits_interval(), 16);
    }

    /**
     * Set the value of the field 'interval'
     */
    public void set_interval(int value) {
        setUIntBEElement(offsetBits_interval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'interval'
     */
    public static int size_interval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'interval'
     */
    public static int sizeBits_interval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'count'
     */
    public int get_count() {
        return (int)getUIntBEElement(offsetBits_count(), 16);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(int value) {
        setUIntBEElement(offsetBits_count(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timestamps
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timestamps' is signed (false).
     */
    public static boolean isSigned_timestamps() {
        return false;
    }

    /**
     * Return whether the field 'timestamps' is an array (true).
     */
    public static boolean isArray_timestamps() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'timestamps'
     */
    public static int offset_timestamps(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timestamps'
     */
    public static int offsetBits_timestamps(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'timestamps' as a int[]
     */
    public int[] get_timestamps() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_timestamps(0); index0++) {
            tmp[index0] = getElement_timestamps(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'timestamps' from the given int[]
     */
    public void set_timestamps(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_timestamps(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'timestamps'
     */
    public int getElement_timestamps(int index1) {
        return (int)getUIntBEElement(offsetBits_timestamps(index1), 16);
    }

    /**
     * Set an element of the array 'timestamps'
     */
    public void setElement_timestamps(int index1, int value) {
        setUIntBEElement(offsetBits_timestamps(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'timestamps'
     */
    public static int totalSize_timestamps() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'timestamps'
     */
    public static int totalSizeBits_timestamps() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'timestamps'
     */
    public static int elementSize_timestamps() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'timestamps'
     */
    public static int elementSizeBits_timestamps() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'timestamps'
     */
    public static int numDimensions_timestamps() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'timestamps'
     */
    public static int numElements_timestamps() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'timestamps'
     * for the given dimension.
     */
    public static int numElements_timestamps(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temReadings
    //   Field type: int[], unsigned
    //   Offset (bits): 96
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temReadings' is signed (false).
     */
    public static boolean isSigned_temReadings() {
        return false;
    }

    /**
     * Return whether the field 'temReadings' is an array (true).
     */
    public static boolean isArray_temReadings() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'temReadings'
     */
    public static int offset_temReadings(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temReadings'
     */
    public static int offsetBits_temReadings(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'temReadings' as a int[]
     */
    public int[] get_temReadings() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_temReadings(0); index0++) {
            tmp[index0] = getElement_temReadings(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'temReadings' from the given int[]
     */
    public void set_temReadings(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_temReadings(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'temReadings'
     */
    public int getElement_temReadings(int index1) {
        return (int)getUIntBEElement(offsetBits_temReadings(index1), 16);
    }

    /**
     * Set an element of the array 'temReadings'
     */
    public void setElement_temReadings(int index1, int value) {
        setUIntBEElement(offsetBits_temReadings(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'temReadings'
     */
    public static int totalSize_temReadings() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'temReadings'
     */
    public static int totalSizeBits_temReadings() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'temReadings'
     */
    public static int elementSize_temReadings() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'temReadings'
     */
    public static int elementSizeBits_temReadings() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'temReadings'
     */
    public static int numDimensions_temReadings() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'temReadings'
     */
    public static int numElements_temReadings() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'temReadings'
     * for the given dimension.
     */
    public static int numElements_temReadings(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humReadings
    //   Field type: int[], unsigned
    //   Offset (bits): 128
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humReadings' is signed (false).
     */
    public static boolean isSigned_humReadings() {
        return false;
    }

    /**
     * Return whether the field 'humReadings' is an array (true).
     */
    public static boolean isArray_humReadings() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'humReadings'
     */
    public static int offset_humReadings(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humReadings'
     */
    public static int offsetBits_humReadings(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'humReadings' as a int[]
     */
    public int[] get_humReadings() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_humReadings(0); index0++) {
            tmp[index0] = getElement_humReadings(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'humReadings' from the given int[]
     */
    public void set_humReadings(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_humReadings(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'humReadings'
     */
    public int getElement_humReadings(int index1) {
        return (int)getUIntBEElement(offsetBits_humReadings(index1), 16);
    }

    /**
     * Set an element of the array 'humReadings'
     */
    public void setElement_humReadings(int index1, int value) {
        setUIntBEElement(offsetBits_humReadings(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'humReadings'
     */
    public static int totalSize_humReadings() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'humReadings'
     */
    public static int totalSizeBits_humReadings() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'humReadings'
     */
    public static int elementSize_humReadings() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'humReadings'
     */
    public static int elementSizeBits_humReadings() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'humReadings'
     */
    public static int numDimensions_humReadings() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'humReadings'
     */
    public static int numElements_humReadings() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'humReadings'
     * for the given dimension.
     */
    public static int numElements_humReadings(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parReadings
    //   Field type: int[], unsigned
    //   Offset (bits): 160
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parReadings' is signed (false).
     */
    public static boolean isSigned_parReadings() {
        return false;
    }

    /**
     * Return whether the field 'parReadings' is an array (true).
     */
    public static boolean isArray_parReadings() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'parReadings'
     */
    public static int offset_parReadings(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parReadings'
     */
    public static int offsetBits_parReadings(int index1) {
        int offset = 160;
        if (index1 < 0 || index1 >= 2) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'parReadings' as a int[]
     */
    public int[] get_parReadings() {
        int[] tmp = new int[2];
        for (int index0 = 0; index0 < numElements_parReadings(0); index0++) {
            tmp[index0] = getElement_parReadings(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'parReadings' from the given int[]
     */
    public void set_parReadings(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_parReadings(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'parReadings'
     */
    public int getElement_parReadings(int index1) {
        return (int)getUIntBEElement(offsetBits_parReadings(index1), 16);
    }

    /**
     * Set an element of the array 'parReadings'
     */
    public void setElement_parReadings(int index1, int value) {
        setUIntBEElement(offsetBits_parReadings(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'parReadings'
     */
    public static int totalSize_parReadings() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'parReadings'
     */
    public static int totalSizeBits_parReadings() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'parReadings'
     */
    public static int elementSize_parReadings() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'parReadings'
     */
    public static int elementSizeBits_parReadings() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'parReadings'
     */
    public static int numDimensions_parReadings() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'parReadings'
     */
    public static int numElements_parReadings() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'parReadings'
     * for the given dimension.
     */
    public static int numElements_parReadings(int dimension) {
      int array_dims[] = { 2,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
